import numpy as np
import QuadraticProgramming as QP


A = np.array([
[1., -1., 1.]
#[-1., -1., -1.]
#[-1., 0.],
#[0., 1.]
#[0., -1., 0.],
#[0., 0., -1.]
])

x = np.array([0.,0.,1.])


b = np.array([1.])

# initialize j with 0,....,m for equality constraints. -1 for others. -1 corresponds to 0 in QP - Best. 
J = np.array([0.0, -1.0, -1.0])

# the linear part of the function
c = np.array([-2.0, -2.0, 1.])

# the hessian of the quadratic equation
C = np.array([
    [1.0, 2.0, -1.0],
    [2.0, 4.0, -2.0],
    [-1.0, -2.0, 1.0]
    ])

D = np.array([
    [1.0, 1.0, 1.0],
    [0.0, 1.0, 0.],
    [0.0, 0.0, 1.0]
    ])

QP.QP2(c, C, x, D, J)
#QP.QP3(A, x, b, c, C, D, J)





